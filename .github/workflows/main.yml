# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_test:
      name: Rust project
      strategy:
        matrix:
          os: [ ubuntu-latest, macOS-latest, windows-latest ]
      runs-on: ${{ matrix.os }}
      steps:
        - uses: actions/checkout@v2
        - uses: actions-rs/toolchain@v1
          with:
            toolchain: stable

        ### FOR WINDOWS ###
        - name: Cache vcpkg installed
          uses: actions/cache@v1.0.3
          if: matrix.os == 'windows-latest'
          with:
            path: $VCPKG_ROOT/installed
            key: ${{ runner.os }}-vcpkg-cache-${{ matrix.db-backend }}
          env:
            VCPKG_ROOT: 'C:\vcpkg'

        - name: Cache vcpkg downloads
          uses: actions/cache@v1.0.3
          if: matrix.os == 'windows-latest'
          with:
            path: $VCPKG_ROOT/downloads
            key: ${{ runner.os }}-vcpkg-cache-${{ matrix.db-backend }}
          env:
            VCPKG_ROOT: 'C:\vcpkg'

        - name: Install dependencies Windows
          run: vcpkg integrate install; vcpkg install openssl:x64-windows
          if: matrix.os == 'windows-latest'
          env:
            VCPKG_ROOT: 'C:\vcpkg'

        - name: Check Windows
          run: cargo check --all
          if: matrix.os == 'windows-latest'
          env:
            VCPKGRS_DYNAMIC: '1'
            VCPKG_ROOT: 'C:\vcpkg'

        - name: Cargo build Windows
          uses: actions-rs/cargo@v1
          if: matrix.os == 'windows-latest'
          with:
            command: build
            args: --release --all-features
          env:
            VCPKGRS_DYNAMIC: '1'
            VCPKG_ROOT: 'C:\vcpkg'

        - name: Cargo test Windows
          uses: actions-rs/cargo@v1
          if: matrix.os == 'windows-latest'
          with:
            command: test
          env:
            VCPKGRS_DYNAMIC: '1'
            VCPKG_ROOT: 'C:\vcpkg'

        ### FOR MAC ###
        - name: Install dependencies macOS
          run: brew update; brew install openssl
          if: matrix.os == 'macOS-latest'

        - name: Cargo check Mac
          run: cargo check --all
          if: matrix.os == 'macOS-latest'

        - name: Cargo build Mac
          uses: actions-rs/cargo@v1
          if: matrix.os == 'macOS-latest'
          with:
            command: build
            args: --release --all-features

        - name: Cargo test Mac
          uses: actions-rs/cargo@v1
          with:
            command: test
          if: matrix.os == 'macOS-latest'

        ### FOR LINUX ###
        - name: Install dependencies Ubuntu
          run: sudo apt-get update && sudo apt-get install --no-install-recommends openssl
          if: matrix.os == 'ubuntu-latest'

        - name: Check Linux
          run: cargo check --all
          if: matrix.os == 'ubuntu-latest'

        - name: Cargo build Linux
          uses: actions-rs/cargo@v1
          if: matrix.os == 'ubuntu-latest'
          with:
            command: build
            args: --release --all-features

        - name: Cargo test Linux
          uses: actions-rs/cargo@v1
          if: matrix.os == 'ubuntu-latest'
          with:
            command: test

  static_checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D clippy::all
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Check for panics
        run: ./tests/nopanic.ci
